{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{3:function(e,t,o){\"use strict\";o.r(t);var a=o(6),r=o.n(a),s=o(45),n=o.n(s),p=(o(90),o(94)),i=o.n(p),d=o(114),l=o.n(d);o(125),o(126),o(127);const c=()=>{const e=document.querySelector('meta[name=\"csrf-token\"]');if(!e)throw new Error(\"Unable to find CSRF token meta\");const t=e.getAttribute(\"content\");if(!t)throw new Error(\"Unable to get CSRF token value\");return t};var m=(e,{method:t,data:o})=>{fetch(e,{method:t||\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify(Object.assign(o,{authenticity_token:c()}))}).then((e=>e.json()))};const u=document.querySelector('[data-s3-uppy-photo=\"form\"]'),h=u.dataset.s3UppyMaxNumberOfFiles,g=u.dataset.s3UppyNote,y=JSON.parse(u.dataset.s3UppyPhotos||\"[]\")||[],w=r()({autoProceed:0==y.length,restrictions:{maxFileSize:2097152,maxNumberOfFiles:h,allowedFileTypes:[\"image/png\",\"image/jpeg\",\"image/webp\"]}});w.use(n.a,{inline:!0,replaceTargetContent:!0,showProgressDetails:!0,target:\"#drag-drop-area\",note:g,width:\"100%\",height:300,proudlyDisplayPoweredByUppy:!1,showRemoveButtonAfterComplete:!0,locale:{strings:{dropPasteImport:\"Drag & drop, paste, or %{browse} to upload file\",browse:\"browse your computer\"}}}).use(l.a,{target:n.a,modes:[\"picture\"]}).use(i.a,{getUploadParameters(){const e=u.getAttribute(\"action\"),t=Array.from(new FormData(u)).reduce(((e,t)=>({...e,[t[0]]:t[1]})),{});return Promise.resolve({method:\"POST\",url:e,fields:t})}}),w.on(\"complete\",(({failed:e,successful:t})=>{Promise.all(t.map((({response:e})=>(e=>{const t=u.dataset.s3UppyObjectUuid,o=u.dataset.s3UppyPhotoType;return m(\"/api/photos\",{data:{photo:{direct_url:e,photo_type:o,object_uuid:t}}})})(e.body.location)))).then((()=>{console.log(\"File uploaded and image created!\")}))})),w.on(\"file-removed\",((e,t)=>{var o;console.log(\"Remove file\",e),e.meta.photoId&&(o=e.meta.photoId,m(\"/api/photos\",{method:\"DELETE\",data:{photo:{id:o}}}))})),(async e=>{for(let t=0;t<e.length;t++){const o=e[t],a=await fetch(o.photo.url),r=await a.blob();w.addFile({name:o.photo.file_name,type:r.type,data:r,meta:{photoId:o.id},remote:!0})}w.getFiles().forEach((e=>{console.log(e.id),w.setFileState(e.id,{progress:{uploadComplete:!0,percentage:100,uploadStarted:Date.now()}})}))})(y)}}]);","name":"js/photo-upload.js?v=4d2d0","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[2],{\n\n/***/ 3:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/core/lib/index.js\nvar lib = __webpack_require__(6);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/dashboard/lib/index.js\nvar dashboard_lib = __webpack_require__(45);\nvar dashboard_lib_default = /*#__PURE__*/__webpack_require__.n(dashboard_lib);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/golden-retriever/lib/index.js\nvar golden_retriever_lib = __webpack_require__(90);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/aws-s3/lib/index.js\nvar aws_s3_lib = __webpack_require__(94);\nvar aws_s3_lib_default = /*#__PURE__*/__webpack_require__.n(aws_s3_lib);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/webcam/lib/index.js\nvar webcam_lib = __webpack_require__(114);\nvar webcam_lib_default = /*#__PURE__*/__webpack_require__.n(webcam_lib);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/core/dist/style.min.css\nvar style_min = __webpack_require__(125);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/dashboard/dist/style.min.css\nvar dist_style_min = __webpack_require__(126);\n\n// EXTERNAL MODULE: ./node_modules/@uppy/webcam/dist/style.min.css\nvar webcam_dist_style_min = __webpack_require__(127);\n\n// CONCATENATED MODULE: ./src/js/apiFetch.js\nconst getCSRFToken = () => {\n  const meta = document.querySelector('meta[name=\"csrf-token\"]');\n\n  if (!meta) {\n    throw new Error('Unable to find CSRF token meta');\n  }\n\n  const csrfToken = meta.getAttribute('content');\n\n  if (!csrfToken) {\n    throw new Error('Unable to get CSRF token value');\n  }\n\n  return csrfToken;\n};\n\nconst apiFetch = (path, {\n  method,\n  data\n}) => {\n  fetch(path, {\n    method: method || 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify(Object.assign(data, {\n      authenticity_token: getCSRFToken()\n    }))\n  }).then(response => response.json());\n};\n\n/* harmony default export */ var js_apiFetch = (apiFetch);\n// CONCATENATED MODULE: ./src/js/photo-upload.js\n\n\n\n\n\n\n\n\n\n\nconst _form = document.querySelector('[data-s3-uppy-photo=\"form\"]');\n\nconst maxNumberOfFiles = _form.dataset.s3UppyMaxNumberOfFiles;\nconst note = _form.dataset.s3UppyNote;\nconst photos = JSON.parse(_form.dataset.s3UppyPhotos || '[]') || [];\nconst uppy = lib_default()({\n  autoProceed: photos.length == 0,\n  restrictions: {\n    maxFileSize: 2097152,\n    // Limit size to 2 MB on the javascript side\n    maxNumberOfFiles: maxNumberOfFiles,\n    allowedFileTypes: ['image/png', 'image/jpeg', 'image/webp']\n  }\n});\n\nconst createPhoto = imageUrl => {\n  const objectUuid = _form.dataset.s3UppyObjectUuid;\n  const photoType = _form.dataset.s3UppyPhotoType; // Create model for this user with s3 image url\n\n  return js_apiFetch('/api/photos', {\n    data: {\n      photo: {\n        direct_url: imageUrl,\n        photo_type: photoType,\n        object_uuid: objectUuid\n      }\n    }\n  });\n};\n\nconst deletePhoto = photoId => {\n  return js_apiFetch('/api/photos', {\n    method: 'DELETE',\n    data: {\n      photo: {\n        id: photoId\n      }\n    }\n  });\n};\n\nconst loadExistingPhotos = async photos => {\n  for (let i = 0; i < photos.length; i++) {\n    const photo = photos[i];\n    const response = await fetch(photo.photo.url);\n    const blob = await response.blob();\n    uppy.addFile({\n      name: photo.photo.file_name,\n      type: blob.type,\n      data: blob,\n      meta: {\n        photoId: photo.id\n      },\n      remote: true\n    });\n  }\n\n  uppy.getFiles().forEach(file => {\n    console.log(file.id);\n    uppy.setFileState(file.id, {\n      progress: {\n        uploadComplete: true,\n        percentage: 100,\n        uploadStarted: Date.now()\n      }\n    });\n  });\n};\n\nuppy.use(dashboard_lib_default.a, {\n  inline: true,\n  replaceTargetContent: true,\n  showProgressDetails: true,\n  target: '#drag-drop-area',\n  note: note,\n  width: '100%',\n  height: 300,\n  proudlyDisplayPoweredByUppy: false,\n  showRemoveButtonAfterComplete: true,\n  locale: {\n    strings: {\n      dropPasteImport: 'Drag & drop, paste, or %{browse} to upload file',\n      browse: 'browse your computer'\n    }\n  }\n}).use(webcam_lib_default.a, {\n  target: dashboard_lib_default.a,\n  modes: ['picture']\n}) // .use(GoldenRetriever)\n.use(aws_s3_lib_default.a, {\n  getUploadParameters() {\n    // 1. Get URL to post to from action attribute\n    const _url = _form.getAttribute('action'); // 2. Create Array from FormData object to make it easy to operate on\n\n\n    const _formDataArray = Array.from(new FormData(_form)); // 3. Create a JSON object from array\n\n\n    const _fields = _formDataArray.reduce((acc, cur) => ({ ...acc,\n      [cur[0]]: cur[1]\n    }), {}); // 4. Return resolved promise with Uppy. Uppy it will add file in file param as the last param\n\n\n    return Promise.resolve({\n      method: 'POST',\n      url: _url,\n      fields: _fields\n    });\n  }\n\n});\nuppy.on('complete', ({\n  failed,\n  successful\n}) => {\n  Promise.all(successful.map(({\n    response\n  }) => createPhoto(response.body.location))).then(() => {\n    console.log('File uploaded and image created!');\n  });\n});\nuppy.on('file-removed', (file, reason) => {\n  console.log('Remove file', file);\n  if (file.meta.photoId) deletePhoto(file.meta.photoId);\n});\nloadExistingPhotos(photos);\n\n/***/ })\n\n}]);","inputSourceMap":null}